-- 20.12.2018 08:14:13 MH V1.0a
-- 10.01.2019 09:10:08 MH V1.0b
-- 18.01.2019 10:38:42 MH V1.0c
-- 21.01.2019 09:32:13 MH V1.0d
-- 22.01.2019 09:44:53 MH V1.0e

generic = {
  name = 'LVQ2.1',
  parameter = {
   alpha = 0.1,
   epsilon = 0.25,
   maxEpoch = 150.0,
   neurons = 4,
   minLearningRate = 0.05,
   continuesAlgo = false,
   lastAlgo = false
  },

  refreshPins = function(self)
     if self.parameter.continuesAlgo then
        block.setInputsPinCount(2)
        block.setInputPinName(1, 'Data')
        block.setInputPinTypeRestrains(1, 'table')
        block.setInputPinName(2, 'IW')
        block.setInputPinTypeRestrains(2, 'table', 'boolean' , 'nil')
     else
        block.setInputsPinCount(1)
        block.setInputPinName(1, '')
        block.setInputPinTypeRestrains(1, 'table')
     end
  end,

  refreshVisible = function(self, conAlgo, lastAlgo)
        gui.set('Neurons', 'Enabled', not conAlgo)
        gui.set('CheckBoxLastAlgo', 'Visible', conAlgo)
        gui.set('CheckBoxContinuesAlgo', 'Enabled', not lastAlgo)
  end,

  init = function(self)
     block.setOutputsPinCount(1)
     block.setOutputPinTypeRestrains(1, 'table')
     generic.refreshPins(self)
     block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', self.name, "Procced the LVQ Algorithmus")
    gui.add('Edit', 'Alpha', 'Alpha')
    gui.set('Alpha', 'Number', self.parameter.alpha)
    gui.add('Edit', 'Epsilon', 'Epsilon')
    gui.set('Epsilon', 'Number', self.parameter.epsilon)
    gui.add('Edit', 'maxEpoch', 'Max Epoch')
    gui.set('maxEpoch', 'Number', self.parameter.maxEpoch)
    gui.add('Edit','minLearningRate', 'Min Learning Rate')
    gui.set('minLearningRate', 'Number', self.parameter.minLearningRate)
    gui.add('Edit', 'Neurons', 'Neurons')
    gui.set('Neurons', 'Number', self.parameter.neurons)
    gui.add('CheckBox', 'CheckBoxContinuesAlgo', 'Continues Algo')
    gui.set('CheckBoxContinuesAlgo', 'Checked', self.parameter.continuesAlgo)
    gui.add('CheckBox', 'CheckBoxLastAlgo', 'Last Algo')
    gui.set('CheckBoxLastAlgo', 'Checked', self.parameter.lastAlgo)
    gui.setEventHandler(
       self,
       'CheckBoxContinuesAlgo',
       {
          Click = function(self)
             self.parameter.continuesAlgo = gui.get('CheckBoxContinuesAlgo')
             self:refreshPins()
             self:refreshVisible(self.parameter.continuesAlgo)
          end
       }
    )
    gui.setEventHandler(
       self,
       'CheckBoxLastAlgo',
       {
          Click = function(self)
             self.parameter.lastAlgo = gui.get('CheckBoxLastAlgo')
             self:refreshVisible(self.parameter.continuesAlgo,self.parameter.lastAlgo)
          end
        }
    )
    self:refreshVisible(self.parameter.continuesAlgo,self.parameter.lastAlgo)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.alpha = gui.get('Alpha', 'Number')
    self.parameter.maxEpoch = gui.get('maxEpoch', 'Number')
    self.parameter.neurons = gui.get('Neurons', 'Number')
    self.parameter.minLearningRate = gui.get('minLearningRate', 'Number')
    self.parameter.continuesAlgo = gui.get('CheckBoxContinuesAlgo', 'Checked')
    self.parameter.lastAlgo = gui.get('CheckBoxLastAlgo', 'Checked')
    self.parameter.epsilon = gui.get('Epsilon', 'Number')
    self:refreshPins()
    return gui.assert(
      self.name,
      self.parameter.alpha > 0 and self.parameter.alpha <= 1 , 'Alpha must be between 0 and 1')
      and
      gui.assert(
      self.name,
      self.parameter.maxEpoch > 0, 'The number of Max Epoch must be bigger than 0')
      and
      gui.assert(
      self.name,
      self.parameter.neurons > 0, 'The number of Neurons must be bigger than 0')
      and
      gui.assert(
      self.name,
      self.parameter.minLearningRate > 0 and self.parameter.minLearningRate < self.parameter.alpha, 'The Minimum Learning Rate must be bigger than 0 and smaller than the Alpha value')
      and
      gui.assert(
      self.name,
      self.parameter.epsilon > 0.0 and self.parameter.epsilon <= 1.0, 'Epsilon must be between 0 and 1')
  end,


  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x40, '"'..self.name..'"')
  end,

  generate = function(self)
    local source = [==[
        local block = {}

          block.start = function()
             block.epoch, block.iwRun = 1, true
             block.test = true;
          end

          block.distance = function(a,b)
            local dist = 0.0
            for i = 2, #a do
              dist = dist + (a[i] - b[i]) ^2
            end

            return math.sqrt(dist)
          end

          block.lvq = function(a,b)
             local d1, d2 = math.huge, math.huge
             local w1, w2, dist

             for i,x in ipairs(b) do
                dist = block.distance(a,x)
                if dist < d1 then
                   d2, w2 = d1, w1
                   d1, w1 = dist, i

                elseif dist < d2 then
                   d2, w2 = dist, i

                end
             end

             if math.min(d1 / d2, d2 / d1) > (1 - EPSILON) and
                math.max(d1 / d2, d2 / d1) < (1 + EPSILON) and
                b[w1][1] == a[1] and b[w2][1] ~= a[1] then

                 for i = 2, #b[w1] do
                     b[w1][i] = b[w1][i] - block.learningRate * (a[i] - b[w2][i])
                     b[w2][i] = b[w2][i] + block.learningRate * (a[i] - b[w2][i])
                 end

             elseif math.min(d1 / d2, d2 / d1) > (1 - EPSILON) and
                    math.max(d1 / d2, d2 / d1) < (1 + EPSILON) and
                    b[w1][1] ~= a[1] and b[w2][1] == a[1]then

                 for i = 2, #b[w1] do
                     b[w1][i] = b[w1][i] + block.learningRate * (a[i] - b[w1][i])
                     b[w2][i] = b[w2][i] - block.learningRate * (a[i] - b[w2][i])
                 end
             end

             return b
         end

       ]==]

       if not self.parameter.continuesAlgo then
          source = source .. [==[

          block.sumSizeList = function(a)

             local sum, count = 0, 0

             for i,x in pairs(a) do
                sum, count = sum + x, count + 1
             end

             return sum,count
          end

          block.round = function(a)
             return a >= 0 and math.floor(a+0.5) or math.ceil(a-0.5)
          end

          block.iw = function(a)

             local iw = {}
             local classes = {}
             local percentage = {}
             local sumVectors = {}
             local sum = 0
             local classSize = 0


             for _,x in ipairs(a) do
                local x1 = x[1]
                if not classes[x1] then
                   classes[x1] = 0
                end
                   classes[x1] = classes[x1] + 1
                for i = 1, #x-1 do
                   if not sumVectors[i] then
                      sumVectors[i] = 0
                   end
                   sumVectors[i] = sumVectors[i] + x[i+1]
                end
             end

             sum,classSize = block.sumSizeList(classes)

             if classSize > NEURONS then
                finish('LVQ1', 'The Amount of Neurons must at least be the same Number as used Classes')
             end

             for i,class in pairs(classes) do
                if classSize == NEURONS then
                   percentage[i] = 1
                else
                   percentage[i] = block.round(NEURONS * (class / sum))
                end
             end

             for i=1, NEURONS do
                iw[i] = {}
             end

             local k = 1

             for i,percent in pairs(percentage) do
                for j=1, percent do
                   iw[k][1] = i
                   for l=1, #a[1]-1 do
                      iw[k][l+1] = sumVectors[l] / sum
                   end
                   k = k + 1
                end
             end

             return iw
          end

          ]==]
       end

       source = source .. [==[

          block.step = function(a,b)

             block.learningRate = ALPHA * (1-(block.epoch/MAXEPOCH))

       ]==]

       if self.parameter.continuesAlgo then
          source = source .. [==[

            if not b then
               return b
            end

            if block.iwRun then
                block.b, block.iwRun = b, false
             end

         ]==]
       else
          source = source .. [==[

             if block.iwRun then
                block.b, block.iwRun = block.iw(a), false
             end
          ]==]
       end
       source = source .. [==[

             if block.epoch > MAXEPOCH or block.learningRate < MINLEARNINGRATE then
       ]==]

       if self.parameter.lastAlgo then
          source = source .. [==[
               finish('LVQ1', 'Reached the Maximum Epochs')
            ]==]
       end
       source = source .. [==[

                return block.b
             end

             for _,x in ipairs(a) do
                block.b = block.lvq(x,block.b)
             end

             block.epoch = block.epoch + 1
             return false

         end

        return block
    ]==]
    local replaces = {
      ['ALPHA'] = self.parameter.alpha,
      ['MAXEPOCH'] = self.parameter.maxEpoch,
      ['NEURONS'] = self.parameter.neurons,
      ['MINLEARNINGRATE'] = self.parameter.minLearningRate,
      ['EPSILON'] = self.parameter.epsilon,
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

